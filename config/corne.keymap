/*
 * Custom ZMK Configuration for 5-Column Corne  
 * Dvorak layout with thumb-based layer activation
 * Clean implementation using built-in behaviors
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer definitions
#define BASE 0
#define NAV  1
#define SYM  2  
#define FN   3

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_5col_layout;
    };

    macros {
        bt_0_clear: bt_0_clear {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings = <&bt BT_SEL 0>, <&bt BT_CLR>;
        };        
        bt_1_clear: bt_1_clear {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings = <&bt BT_SEL 1>, <&bt BT_CLR>;
        };
        bt_2_clear: bt_2_clear {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings = <&bt BT_SEL 2>, <&bt BT_CLR>;
        };
        bt_3_clear: bt_3_clear {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings = <&bt BT_SEL 3>, <&bt BT_CLR>;
        };
        macro_semi: macro_semi {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_release &kp LSHFT &kp RSHFT>, <&kp SEMI>;
        };
    };

    behaviors {
        mt: mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            display-name = "Mod-Tap";
        };
        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
            display-name = "Layer-Tap";
        };
        bt0: bluetooth_profile_0 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0>, <&bt_0_clear>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        bt1: bluetooth_profile_1 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1>, <&bt_1_clear>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };        
        bt2: bluetooth_profile_2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2>, <&bt_2_clear>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        bt3: bluetooth_profile_3 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3>, <&bt_3_clear>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        r_ralt: r_ralt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp R>, <&mt RALT R>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        colon_semicolon: colon_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&macro_semi>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    /*
     * Combo definitions for enhanced typing efficiency
     */
    combos {
        compatible = "zmk,combos";        
        // All layer combos
        combo_esc {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp ESC>;
        };
        combo_esc_2 {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp ESC>;
        };
        combo_equal {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp EQUAL>;
        };
        combo_grave {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp GRAVE>;
        };

        // Layer combos
        combo_lpar {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp LPAR>;
            layers = <BASE>;
        };
        combo_rpar {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp RPAR>;
            layers = <BASE>;
        };
        combo_lbkt {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp LBKT>;
            layers = <NAV>;
        };
        combo_rbkt {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp RBKT>;
            layers = <NAV>;
        };
        combo_lbrc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp LBRC>;
            layers = <SYM FN>;
        };
        combo_rbrc {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp RBRC>;
            layers = <SYM FN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        /*
         * BASE LAYER: Dvorak with strategic modifier placement
         * Homerow mods: a/s = ctrl, comma/r = alt, dot/c = gui
         * Thumb layer-taps for navigation, symbols, and functions
         */
        base_layer {
            display-name = "Dvorak";
            bindings = <
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         &kp SQT       &mt LALT COMMA &mt LGUI DOT &kp P         &kp Y             &kp F         &kp G         &mt RGUI C    &r_ralt       &kp L
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &mt LCTRL A   &kp O         &kp E         &kp U         &kp I             &kp D         &kp H         &kp T         &kp N         &mt RCTRL S
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &colon_semicolon &kp Q      &kp J         &kp K         &kp X             &kp B         &kp M         &kp W         &kp V         &kp Z
    // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                     &lt FN MINUS  &mt LSHFT SPACE &lt NAV TAB     &lt SYM RET   &mt RSHFT BSPC &mt RGUI UNDER
    //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
            >;
        };

        /*
         * NUM/NAV LAYER: Numbers, navigation, and brackets  
         * Calculator-style number layout with navigation cluster
         * Transparent del key for clean space+del interaction
         */
        nav_layer {
            display-name = "Num/Nav";
            bindings = <
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         &kp BSLH      &mt LALT N7   &mt LGUI N8   &kp N9        &kp N0            &kp RIGHT      &kp PG_UP    &kp UP        &trans        &kp RIGHT
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &mt LCTRL FSLH  &kp N4      &kp N5        &kp N6        &kp DLLR          &kp LG(LS(LC(N4))) &kp LEFT &kp DOWN      &kp RIGHT     &trans
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &kp QMARK       &kp N1      &kp N2        &kp N3        &kp EXCL          &kp LEFT      &kp HOME      &kp PG_DN     &kp END       &caps_word
    // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                     &trans        &trans        &trans            &kp RET       &trans        &trans
    //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
            >;
        };

        /*
         * SYM LAYER: Symbols (left hand only for mouse use)  
         * Programming symbols accessible without moving right hand
         */
        sym_layer {
            display-name = "Sym/Media";
            bindings = <
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         &kp PIPE      &mt LALT AMPS &mt LGUI ASTRK &kp LPAR     &kp RPAR          &kp C_BRI_UP  &kp LS(TAB)   &mt RGUI C_VOL_UP &kp LG(TAB) &kp C_PP
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &mt LCTRL QMARK &kp DLLR    &kp PRCNT     &kp CARET     &kp DLLR          &kp C_BRI_DN  &kp C_PREV    &kp C_VOL_DN  &kp C_NEXT    &mt RCTRL C_MUTE
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &kp BSPC      &kp EXCL      &kp AT        &kp HASH      &kp DEL           &kp LG(LS(LC(N4))) &kp LC(LS(TAB)) &kp LG(LS(N4)) &kp LC(TAB) &kp LG(LS(N5))
    // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                     &kp MINUS     &kp SPACE     &kp TAB           &trans        &trans        &trans
    //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
            >;
        };

        /*
         * FN LAYER: Function keys, media controls, and system functions
         * F-key clusters with media controls and Bluetooth management
         * Transparent space key for repeatable spaces while in layer
         */
        fn_layer {
            display-name = "Function";
            bindings = <
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         &kp F12       &mt LALT F7   &mt LGUI F8   &kp F9        &kp TAB           &trans        &kp F17       &mt RGUI F18  &mt RALT F19  &trans
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &mt LCTRL F11 &kp F4        &kp F5        &kp F6        &kp LS(TAB)       &kp F13       &kp F14       &kp F15       &kp F16       &trans
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &kp F10       &kp F1        &kp F2        &kp F3        &bootloader       &bt0          &bt1          &bt2          &bt3          &bootloader
    // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                     &trans        &trans        &trans            &kp RET       &kp BSPC      &kp UNDER
    //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯                              
            >;
        };
    };
};